generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  BANK
  MOBILE_MONEY
  CASH
  CRYPTO
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum CategoryType {
  INCOME
  EXPENSE
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  avatar    String?
  password  String
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]
}

model Account {
  id             Int         @id @default(autoincrement())
  userId         Int
  accountNumber  Int
  name           String
  type           AccountType
  currentBalance Decimal     @default(0.00) @db.Decimal(10, 2)
  currency       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Category {
  id        Int          @id @default(autoincrement())
  userId    Int
  name      String
  type      CategoryType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user             User             @relation(fields: [userId], references: [id])
  subCategories    SubCategory[]
  transactions     Transaction[]
  budgetCategories BudgetCategory[]
}

model SubCategory {
  id         Int      @id @default(autoincrement())
  categoryId Int
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category     Category      @relation(fields: [categoryId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          Int
  accountId       Int
  categoryId      Int
  subCategoryId   Int?
  amount          Decimal           @default(0.00) @db.Decimal(10, 2)
  type            TransactionType
  description     String?
  transactionDate DateTime          @default(now())
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  account     Account      @relation(fields: [accountId], references: [id])
  category    Category     @relation(fields: [categoryId], references: [id])
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id])
}

model Budget {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  amount    Decimal  @default(0.00) @db.Decimal(10, 2)
  startDate DateTime
  endDate   DateTime
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user             User             @relation(fields: [userId], references: [id])
  budgetCategories BudgetCategory[]
}

model BudgetCategory {
  id              Int      @id @default(autoincrement())
  budgetId        Int
  categoryId      Int
  allocatedAmount Decimal  @default(0.00) @db.Decimal(10, 2)
  spentAmount     Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  budget   Budget   @relation(fields: [budgetId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}
