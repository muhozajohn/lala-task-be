generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model represents both renters and hosts in the system
// - As a host: Can have multiple properties (one-to-many with Property)
// - As a renter: Can have multiple bookings (one-to-many with Booking)
model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  name       String
  password   String?
  role       UserRole
  googleId   String?    @unique
  // One host can have many properties
  properties Property[]
  // One user can have many bookings
  bookings   Booking[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// Property model represents rental listings
// - Belongs to one host (many-to-one with User)
// - Can have multiple bookings (one-to-many with Booking)
model Property {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  pricePerNight Decimal
  location      String
  images        String[]
  amenities     String[]
  houseRules    String[]
  maxGuests     Int
  bathrooms     Int
  bedrooms      Int
  // Each property belongs to one host
  hostId        Int
  // Each property belongs to one host
  host          User      @relation(fields: [hostId], references: [id])
  // One property can have many bookings
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([hostId])
}

// Booking model represents a rental reservation
// - Belongs to one property (many-to-one with Property)
// - Belongs to one renter (many-to-one with User)
model Booking {
  id             Int           @id @default(autoincrement())
  checkIn        DateTime
  checkOut       DateTime
  status         BookingStatus
  propertyId     Int
  renterId       Int
  numberOfNights Int
  numberOfGuests Int
  totalPrice     Float
  // Each booking is for one property
  property       Property      @relation(fields: [propertyId], references: [id])
  // Each booking belongs to one renter
  renter         User          @relation(fields: [renterId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([propertyId])
  @@index([renterId])
}

// Enum for user roles
enum UserRole {
  RENTER
  HOST
}

// Enum for booking status
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
